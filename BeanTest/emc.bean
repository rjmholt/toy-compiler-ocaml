# Tic Tac Toe (Bean Edition)
# Author : Team EMC
# Invocation of the program starts a new game.
# Program terminates when game ends.

# Tile coords are based on 9-digit numpad
# | 7 | 8 | 9 |
# | 4 | 5 | 6 |
# | 1 | 2 | 3 |

# Example Board with Player 1 (X) winning over Player 2 (O)
# Intended output of emc.in (Untested!)
# | X | O | X |
# | O | X |   |
# | X |   | O |

# Define struct for board tiles
# int 0 represents Blank ( )
# int 1 represents Player 1 (X)
# int 2 represents Player 2 (O)
typedef {t_vii : int, t_viii : int, t_ix  : int,
         t_iv  : int, t_v    : int, t_vi  : int,
         t_i   : int, t_ii   : int, t_iii : int} GameBoard

# Initialize Board State (with 0's)
proc initializeBoard (ref GameBoard board)

    board.t_i    := 0;
    board.t_ii   := 0;
    board.t_iii  := 0;
    board.t_iv   := 0;
    board.t_v    := 0;   
    board.t_vi   := 0;
    board.t_vii  := 0;
    board.t_viii := 0;
    board.t_ix   := 0;

end

# A little long, but there are no arrays in Bean.
proc inputBoard (ref GameBoard board, val int tile, val bool player)

    int player_int;

    # bool to Player #num
    if player = true then
        player_int := 1;
    else
        player_int := 2;
    fi

    if tile = 1 then
        board.t_i    := player_int;
    fi
    if tile = 2 then
        board.t_ii   := player_int;
    fi
    if tile = 3 then
        board.t_iii  := player_int;
    fi
    if tile = 4 then
        board.t_iv   := player_int;
    fi
    if tile = 5 then
        board.t_v    := player_int;
    fi
    if tile = 6 then
        board.t_vi   := player_int;
    fi
    if tile = 7 then
        board.t_vii  := player_int;
    fi
    if tile = 8 then
        board.t_viii := player_int;
    fi
    if tile = 9 then
        board.t_ix   := player_int;
    fi
    
end

# Sets the row winner (of x,y,z)
proc rowWinner (val int x, val int y, val int z, ref int winner)

    int row_sum;
    bool row_complete;

    row_sum := x + y + z;
    row_complete := x > 0 and y > 0 and z > 0;

    # Player 1 Won
    if row_complete and row_sum = 3 then
        winner := 1;
    fi

    # Player 2 Won
    if row_complete and row_sum = 6 then
        winner := 2;
    fi

    # winner already 0 from initialization

end

# Check if GameBoard has been won
proc gameWon (val GameBoard board, ref int winner)

    # 6 Possible Rows (3 Horizontal, 3 Vertical, 2 Diagonal)

    # Horizontal
    rowWinner(board.t_vii, board.t_viii, board.t_ix,  winner);
    rowWinner(board.t_iv,  board.t_v,    board.t_vi,  winner);
    rowWinner(board.t_i,   board.t_ii,   board.t_iii, winner);

    # Vertical
    rowWinner(board.t_vii,  board.t_iv, board.t_i,   winner);
    rowWinner(board.t_viii, board.t_v,  board.t_ii,  winner);
    rowWinner(board.t_ix,   board.t_vi, board.t_iii, winner);

    # Diagonal
    rowWinner(board.t_vii, board.t_v, board.t_iii, winner);
    rowWinner(board.t_i,   board.t_v, board.t_ix,  winner);

end

# Start of Row
proc printLeftCol() 
    write "    | ";
end

# Mid of Row
proc printMidCol()
   write " | ";
end

# End of Row, Newline
proc printRightCol()
    write " |\n";
end

# Print Tile
proc printTile(val int tile)

    if tile = 0 then
        write " ";
    fi
    if tile = 1 then
        write "X";
    fi
    if tile = 2 then
        write "O";
    fi

end

proc printBoard (val GameBoard board)

    # Top Row
    printLeftCol();
    printTile(board.t_vii);
    printMidCol();
    printTile(board.t_viii);
    printMidCol();
    printTile(board.t_ix);
    printRightCol();

    # Mid Row
    printLeftCol();
    printTile(board.t_iv);
    printMidCol();
    printTile(board.t_v);
    printMidCol();
    printTile(board.t_vi);
    printRightCol();

    # Bot Row
    printLeftCol();
    printTile(board.t_i);
    printMidCol();
    printTile(board.t_ii);
    printMidCol();
    printTile(board.t_iii);
    printRightCol();

end

proc main()

    # Game Board
    GameBoard board;

    # Game Variables
    int input;
    int winner;
    bool player;

    # Board Initialization
    initializeBoard(board);

    # 0 means no winner
    winner := 0;

    # Player 1 (X) starts first
    player := true; # True for P1, False for P2
    
    # Game Loop
    while winner = 0 do 
        # Read stdin input until game is over
        read input;

        # Input must be an integer from 1 to 9 inclusive
        if input > 0 and input < 10 then

            # Input player input into board
            inputBoard(board,input,player);

            # Display Board
            printBoard(board);
            write "\n-------------\n\n"; # Some Spacing

            # Sets Winner (if any)
            gameWon(board, winner);

            # Next Player's Turn
            player := not player;
            
        else

            # Message for User
            write "ERROR: Please input an integer in range [1-9]\n\n";
        
        fi
    od

    # Announce Winner
    write "Winner is Player ";
    write winner;
    write "!\n";

end
