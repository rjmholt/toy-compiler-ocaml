# ===========================================================
# Makefile for Building the Bean Compiler and Pretty Printer
# ----------------------------------------------------------
# This makefile will generate a single binary, "bean",
# along with a bytecode executeable, "bean.byte". This
# binary will execute the bean compiler on a given input
# program, like so:
# 	"./bean [-p] <bean-filepath>"
# Where the "-p" option tells the compiler to pretty print
# instead of compiling.
#
# Typical usage to build the compiler in an otherwise
# empty directory is:
# 	"make"
# If you wish to remove files from a previous build, run:
# 	"make clean"
# If you wish remove the binary and bytecode file generated
# too before you build, run:
# 	"make clobber"
# A easy way to use this command each time is:
# 	"make clobber && make"
# If "make" is failing, you may need to generate a
# dependency file first and try again, like:
# 	"make depend"
# Note that there is no "make install" command, you must do
# that yourself, sorry.
# ===========================================================

TARGETS = bean
TARGETS_BYTE=$(TARGETS:%=%.byte)

MODULES = bean_ast \
	  bean_lex \
	  bean_parse \
	  bean_pprint \
	  bean_symtbl \
	  bean_semantic \
	  bean_intermediate_code \
	  bean_oz
MLFILES = $(addsuffix .ml, $(MODULES))
CMOFILES = $(addsuffix .cmo, $(MODULES))
CMXFILES = $(addsuffix .cmx, $(MODULES))

ALLMODULES = $(MODULES) bean

OCAMLLEX = ocamllex
# The "-v" flag set here will generate an output file describing
# the table generated by ocamllex. Remove it if you don't want this
OCAMLYACC = ocamlyacc -v
OCAMLDEP = ocamldep

OCAMLFLAGS =

# Generate both native and bytecode executables
all : opt byte
# Generate bytecode executable
byte: $(TARGETS_BYTE)
# Generate native binary executable
opt: $(TARGETS)

# OCaml intermediary file generation
%.cmi: %.mli
	ocamlc $(OCAMLFLAGS) -c $<

%.cmo: %.ml
	ocamlc $(OCAMLFLAGS) -g -c $<

%.cmx: %.ml
	ocamlopt $(OCAMLOPTFLAGS) -g -c $<

%.ml: %.mll
	$(OCAMLLEX) $^

%.ml %.mli: %.mly
	$(OCAMLYACC) $^

bean.byte : $(CMOFILES) bean.cmo
	ocamlc -g -o $@ $^

bean : $(CMXFILES) bean.cmx
	ocamlopt -g -o $@ $^

# Clean the working directory of generated intermediary files
clean :
	rm -f *.cmo *.cmi *.cmx *.o
	rm -f bean_lex.ml bean_parse.ml bean_parse.mli

# Clean the working directory of generated binaries too
clobber : clean
	rm -f $(TARGETS) $(TARGETS_BYTE)

.PHONY : clean clobber depend

# include depend
depend: bean_lex.ml bean_parse.ml
	$(OCAMLDEP) bean.ml bean.mli $(ALLMODULES:%=%.mli) $(ALLMODULES:%=%.ml) >Makefile.depend

-include Makefile.depend
